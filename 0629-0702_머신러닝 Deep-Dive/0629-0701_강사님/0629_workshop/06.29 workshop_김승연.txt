bx_data = np.loadtxt('ex1.txt')
x_data = np.array(bx_data[:,:2])
y_data = np.array(bx_data[:,2])
with tf.Graph().as_default():
    x = tf.placeholder(tf.float32, shape=[None,2])
    y = tf.placeholder(tf.float32, shape = None)
    
    w = tf.Variable([[0,0]], dtype=tf.float32, name='weight') ##가중치의 초기값을 0,0으로 해줌
    b = tf.Variable(0, dtype=tf.float32, name='bias')  ##바이어스의 초기값도 0으로 해줌
    
    y_hat= tf.matmul(w, tf.transpose(x)) #+ b  #y = ax+b
    
    loss = tf.reduce_mean(tf.square(y-y_hat)) ##잔차의 제곱의 평균이 최소인 값을 구하고싶음
    #cost = tf.Variable(loss, dtype=tf.float32, name='cost')
    
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.005) 
    ##점진적으로 줄어들며 찾아갈건데 0.1만큼 줄어듬, 값이 +-로 많이 바뀌면 보폭이 큰것이기 때문에 값을 줄여줘야됨
    train = optimizer.minimize(loss)
    
    init = tf.global_variables_initializer()
    with tf.Session() as sess:
        sess.run(init)
        for step in range(10000):  ##점진적으로 찾아가는 횟수를 100번함
            sess.run(train, feed_dict={x:x_data,y:y_data})  ##우리가 구하고자 하는 값은 train임
            if(step % 500 == 0):
                print(step, sess.run([w]))
        print(step, sess.run([w]))